#!/usr/bin/python
import sys
import re
sys.path.insert(0, "/usr/share/retrace-server/")
from retrace import *
from plugins import *
import json

############################################################################
### Use Factory Method Design Mode
###         Parser              Searcher
###            ^                   ^
###            |                   |  
###     ConcreteParser  <-  ConcreteSeacher
############################################################################

class Parser:
    """ Abstract base class Parser """

    def __init__(self, task, es_url, query_field):
        if self.__class__ == Parser:
            raise NotImplementedError, \
                "Cannot create object of abstract class Parser"
        self.task = task
        self.es_url = es_url
        self.query_field = query_field

    def parse(self):
        """ Abstract method, derived class must overide """
        raise NotImplementedError, \
            "Cannot call abstract method"

    def get_search_result(self):
        """ Abstract method, derived class must overide """
        raise NotImplementedError, \
            "Cannot call abstract method"

    def search_result_and(self, json_a, json_b):
        raise NotImplementedError, \
            "TODO"
 
    def search_result_or(self, json_a, json_b):
        j_a = json.loads(json_a)
        j_b = json.loads(json_b)
        for array in j_b["hits"]["hits"]:
            j_a["hits"]["hits"].append(array) 
        return json.dumps(j_a) 

class CrashParser(Parser):

    def __init__(self, task, es_url, query_field):
        Parser.__init__(self, task, es_url, query_field)
    
        if task.has_backtrace() == False:
            raise RuntimeError, "No backtrace"
            
        self.lines = task.get_backtrace().split('\n')
        self.crash_ip = None
        self.call_trace = []
    
    def parse(self):
        is_crash_ip_found = False
        for line in self.lines:
            if is_crash_ip_found == False:
                self.crash_ip = self.parse_crash_ip(line)
                if self.crash_ip != None:
                    is_crash_ip_found = True
            elif len(self.call_trace) < 3: 
                name = self.parse_call_trace(line)
                if name != None:
                    self.call_trace.append(name)
            else:
                break
        log_info("crash_ip: %s" %(self.crash_ip)) 
        log_info("call_trace: %s" %(self.call_trace)) 
        return is_crash_ip_found

    def get_crash_ip_search_result(self):
        # Remind that \[ should write as \\\\[, because regexp->search_dsl->curl, 
        #    every one transfer, a \ should be replaced by \\ 
        regexp = " *rip: [0-9a-f]{4}:\\\\[\\\\<[0-9a-f]{16}\\\\>\\\\]  \\\\[\\\\<[0-9a-f]{16}\\\\>\\\\] %s\\\\+.*" %(self.crash_ip)
        #log_info("regexp: %s" %(regexp))
        search_dsl = '{"query":{"regexp":{"%s":"%s"}}}' %(self.query_field[0], regexp)
        log_info("get crash ip search dsl: %s" %(search_dsl))
        child = Popen(["curl", "-XGET", self.es_url, "-d", search_dsl], stdout = PIPE)
        return child.communicate(None)[0]

    def get_call_trace_search_result(self, fun):
        regexp = " *\\\\[\\\\<[0-9a-f]{16}\\\\>\\\\] %s\\\\+.*" %(fun)
        #log_info("regexp: %s" %(regexp))
        search_dsl = '{"query":{"regexp":{"%s":"%s"}}}' %(self.query_field[0], regexp)
        log_info("get call trace search dsl: %s" %(search_dsl))
        child = Popen(["curl", "-XGET", self.es_url, "-d", search_dsl], stdout = PIPE)
        return child.communicate(None)[0]
 
    def get_search_result(self):
        query = self.crash_ip

        #return self.get_call_trace_search_result(self.call_trace[0])
        return self.get_crash_ip_search_result()

    def parse_crash_ip(self, line):
        #FIXME: add 32bit support
        pattern = "(RIP:) ([0-9a-f]{4}:\[\<[0-9a-f]{16}\>\])  "\
                        "(\[\<[0-9a-f]{16}\>\]) (?P<function_name>.+)\+"
        prog = re.compile(pattern)
        result =  prog.match(line)
        if result != None:
            return result.group('function_name')   
        return None

    def parse_call_trace(self, line):
        pattern = " (\[\<[a-f0-9]{16}\>\]) (?P<function_name>.+)\+"
        prog = re.compile(pattern)
        result = prog.match(line)
        if result != None:
            return result.group('function_name')   
        return None

class Searcher:
    """ Abstract base class Searcher """
    def __init__(self, es_url, query_field, task):
        if self.__class__ == Searcher:
            raise NotImplementedError, \
                "Cannot create object of abstract class Parser"
        self.es_url = es_url
        self.query_field = query_field
        self.task = task

    def create_parser(self):
        """ Abstract method, derived class must overide """
        raise NotImplementedError, \
            "Cannot call abstract method"

    def get_search_result(self):
        parser = self.create_parser()
        if parser != None:
            # Generate search result
            return parser.get_search_result()
        else:
            return None

class CybertronSearcher(Searcher):
    
    def __init__(self, es_url, query_field, task):
        Searcher.__init__(self, es_url, query_field, task)
    
    def create_parser(self):
        parser = CrashParser(self.task, self.es_url, self.query_field)
        if parser.parse():
            log_info("Task %d: Use CrashParser" %(self.task.get_taskid()))
            return parser
        # Add other parser here
        return None
 
if __name__ == "__main__":
    cmdline_parser = ArgumentParser(description="Execute a retrace parser job")
    cmdline_parser.add_argument("task_id", type=int, help="Task ID (%s/<task_id>) must exist" % CONFIG["SaveDir"])
    cmdline_parser.add_argument("--foreground", action="store_true", default=False, help="Do not fork to background")
    cmdline = cmdline_parser.parse_args()

    log = cmdline._log

    try:
        task = RetraceTask(cmdline.task_id)
    except:
        sys.stderr.write("Task '%d' does not exist\n" % cmdline.task_id)
        exit(1)

    # Search in RedHat KB
    rh_es_url = "http://cybertron.eng.vmware.com:9200/redhat_kb/kb/_search"   
    rh_query_fields = ["text"]  
    rh_searcher = CybertronSearcher(rh_es_url, rh_query_fields, task)  
  
    #print rh_searcher.get_search_result()
    result = rh_searcher.get_search_result()
    if result != None:
        task.set_rhkb_matched(result) 
    
    # Search in VM Bugzilla
    vmb_es_url = "http://cybertron.eng.vmware.com:9200/bugzilla/text/_search"     
    vmb_query_fields = ["text"]   
    vmb_searcher = CybertronSearcher(vmb_es_url, vmb_query_fields, task)  
    
    #print vmb_searcher.get_search_result()
    result = vmb_searcher.get_search_result()
    if result != None:
        task.set_vmbugzilla_matched(vmb_searcher.get_search_result())
    
    task.set_parser_log(log.getvalue())

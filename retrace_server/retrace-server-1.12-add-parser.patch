diff -ruN retrace-server-1.12.1/retrace-server.spec.in retrace-server-1.12p/retrace-server.spec.in
--- retrace-server-1.12.1/retrace-server.spec.in	2015-04-12 16:42:30.834000940 +0800
+++ retrace-server-1.12p/retrace-server.spec.in	2015-04-12 16:56:44.620000107 +0800
@@ -122,6 +122,7 @@
 %{_bindir}/%{name}-cleanup
 %{_bindir}/%{name}-reposync
 %{_bindir}/bt_filter
+%{_bindir}/cybertron_parser
 %{_bindir}/coredump2packages
 %{python_site}/retrace/*
 %{_datadir}/%{name}/*
diff -ruN retrace-server-1.12.1/src/cybertron_parser retrace-server-1.12p/src/cybertron_parser
--- retrace-server-1.12.1/src/cybertron_parser	1970-01-01 08:00:00.000000000 +0800
+++ retrace-server-1.12p/src/cybertron_parser	2015-04-12 22:10:59.167000055 +0800
@@ -0,0 +1,153 @@
+#!/usr/bin/python
+import sys
+import re
+sys.path.insert(0, "/usr/share/retrace-server/")
+from retrace import *
+from plugins import *
+import json
+
+class RetraceLogParser:
+    
+    def __init__(self, task):
+        self.task = task
+        self.call_trace = []
+        self.crash_ip = None
+    
+    def is_kernel_oops_begin(self, line):
+        pattern = '^BUG'
+        prog = re.compile(pattern)
+        if prog.match(line) != None: 
+            return True
+        pattern = '^PGD'
+        prog = re.compile(pattern)
+        return prog.match(line) != None  
+
+    def parse_crash_ip(self, line):
+        pattern = '^RIP.*'
+        prog = re.compile(pattern)
+        result = prog.match(line)
+        if result != None:
+            match = re.split('[\ \t+]*', result.group(0))
+            return match[3]
+        pattern = '^EIP.*'
+        prog = re.compile(pattern)
+        if result != None:
+            match = re.split('[\ \t+]*', result.group(0))
+            print match[3] 
+        else:
+            return None
+
+    def is_call_trace_begin(self, line):
+        pattern = 'Call\ Trace'
+        prog = re.compile(pattern)
+        return prog.match(line) != None 
+        
+    def parse_call_trace(self, line):
+        pattern = '[\ \t]*\[<.*>\]'
+        prog = re.compile(pattern)
+        result = prog.match(line)
+        if result != None:
+            match = re.split('[\ +]*', line)
+            return match[-2]
+        else:
+            return None
+
+    def do_parse(self):
+        if task.has_backtrace() == False:
+            print "No backtrace"
+            return
+        log = task.get_backtrace()
+        lines = log.split('\n')
+        
+        is_begin = False
+        crash_ip_found = False
+        is_call_begin = False
+        is_call_end = False
+        for i in lines:
+            if is_begin == False:
+                is_begin = self.is_kernel_oops_begin(i)
+            elif crash_ip_found == False:
+                self.crash_ip = self.parse_crash_ip(i)
+                if self.crash_ip != None:
+                    crash_ip_found = True
+            elif is_call_begin == False:
+                is_call_begin = self.is_call_trace_begin(i)
+            elif is_call_end == False:
+                ret = self.parse_call_trace(i)
+                if ret != None:
+                    self.call_trace.append(ret)
+                else:
+                    is_call_end = True
+            else:
+                break
+
+    def get_crash_ip(self):
+        return self.crash_ip
+
+    def get_call_trace(self):
+        return self.call_trace 
+ 
+class RedHatKBSearch:
+
+    def __init__(self, parser):
+        self.matched_kbs = []
+        self.parser = parser   
+        self.es_url = "http://cybertron.eng.vmware.com:9200/redhat_kb/kb/_search" 
+        if self.is_crash_issue():
+            self.build_crash_query_dsl()
+        else:
+            self.build_unsupported_query_dsl()
+        #TODO: hang problem
+
+    def is_crash_issue(self):
+        return self.parser.get_crash_ip() != None 
+
+    def build_crash_query_dsl(self):
+        crash_ip = self.parser.get_crash_ip()
+        query = "EIP RIP" + " " + crash_ip
+        call_trace = self.parser.get_call_trace()
+        for i in call_trace:
+            query += " " + i            
+        self.query_dsl = '{"query":{"multi_match":{"query":"%s", "fields":["issue", "resolution", "diagnostic", "rootcause"]}}}' %query 
+
+    def build_unsupported_query_dsl(self):
+        ##TMP code
+        magic_code = "ABCDEFGHIJKLMN"
+        self.query_dsl = '{"query":{"multi_match":{"query":"%s", "fields":["issue", "resolution", "diagnostic", "rootcause"]}}}' %magic_code 
+
+    def do_search(self):
+        child = Popen(["curl", "-XGET", self.es_url, "-d", self.query_dsl], stdout=PIPE)
+        search_result = child.communicate(None)[0]
+        # Now parse the search result 
+        j = json.loads(search_result)
+        for i in j["hits"]["hits"]:
+            self.matched_kbs.append((i["_source"]["title"],i["_id"]))  
+    
+    def get_matched_kbs(self):
+        self.do_search()        
+        return self.matched_kbs          
+
+if __name__ == "__main__":
+    cmdline_parser = ArgumentParser(description="Execute a retrace parser job")
+    cmdline_parser.add_argument("task_id", type=int, help="Task ID (%s/<task_id>) must exist" % CONFIG["SaveDir"])
+    cmdline_parser.add_argument("--foreground", action="store_true", default=False, help="Do not fork to background")
+    cmdline = cmdline_parser.parse_args()
+
+    log = cmdline._log
+
+    try:
+        task = RetraceTask(cmdline.task_id)
+    except:
+        sys.stderr.write("Task '%d' does not exist\n" % cmdline.task_id)
+        exit(1)
+
+    parser = RetraceLogParser(task)
+    parser.do_parse()
+    #print parser.get_crash_ip()
+    #print parser.get_call_trace()
+    
+    searcher = RedHatKBSearch(parser)
+    #print searcher.do_search()
+    for i in searcher.get_matched_kbs():
+        url="https://access.redhat.com/solutions/%d" %int(i[1])
+        print i[0] + "@#$%" + url 
diff -ruN retrace-server-1.12.1/src/lib/retrace.py retrace-server-1.12p/src/lib/retrace.py
--- retrace-server-1.12.1/src/lib/retrace.py	2015-04-12 16:42:30.832001055 +0800
+++ retrace-server-1.12p/src/lib/retrace.py	2015-04-12 20:08:07.102000701 +0800
@@ -1320,6 +1320,7 @@
     """Represents Retrace server's task."""
 
     BACKTRACE_FILE = "retrace_backtrace"
+    MATCHED_FILE = "cybertron_matched"
     CASENO_FILE = "caseno"
     CRASHRC_FILE = "crashrc"
     DOWNLOADED_FILE = "downloaded"
@@ -1556,6 +1557,18 @@
         """Atomically writes given string into BACKTRACE_FILE."""
         self.set_atomic(RetraceTask.BACKTRACE_FILE, backtrace)
 
+       # Add by zengzhuqing: {get,set}_matched
+    def get_matched(self):
+        """Returns None if there is no MATCHED_FILE in the task directory,
+        MATCHED_FILE's contents otherwise."""
+        # max 16 MB
+        return self.get(RetraceTask.MATCHED_FILE, maxlen=1 << 24)
+
+    def set_matched(self, matched):
+        """Atomically writes given string into MATCHED_FILE."""
+        self.set_atomic(RetraceTask.MATCHED_FILE, matched)
+    # Add by zengzhuqing end    
+
     def has_log(self):
         """Verifies whether LOG_FILE is present in the task directory."""
         return self.has(RetraceTask.LOG_FILE)
diff -ruN retrace-server-1.12.1/src/Makefile.am retrace-server-1.12p/src/Makefile.am
--- retrace-server-1.12.1/src/Makefile.am	2015-04-12 16:42:30.833000995 +0800
+++ retrace-server-1.12p/src/Makefile.am	2015-04-12 16:50:08.508000059 +0800
@@ -22,7 +22,8 @@
                    retrace-server-cleanup \
                    retrace-server-reposync \
                    retrace-server-worker \
-                   retrace-server-interact
+                   retrace-server-interact \
+                   cybertron_parser
 
 interface_PYTHON = backtrace.wsgi \
                    create.wsgi \
diff -ruN retrace-server-1.12.1/src/managertask.xhtml retrace-server-1.12p/src/managertask.xhtml
--- retrace-server-1.12.1/src/managertask.xhtml	2015-04-12 16:42:30.832001055 +0800
+++ retrace-server-1.12p/src/managertask.xhtml	2015-04-05 13:29:17.843000003 +0800
@@ -119,5 +119,6 @@
       {delete_yesno}
     </table>
     {backtracewindow}
+    {testwindow}
   </body>
 </html>
diff -ruN retrace-server-1.12.1/src/manager.wsgi retrace-server-1.12p/src/manager.wsgi
--- retrace-server-1.12.1/src/manager.wsgi	2015-04-12 16:42:30.832001055 +0800
+++ retrace-server-1.12p/src/manager.wsgi	2015-04-12 22:19:47.540999973 +0800
@@ -296,6 +296,7 @@
         interactive = ""
         backtrace = ""
         backtracewindow = ""
+        testwindow = ""
         if not ftptask:
             if task.has_backtrace():
                 backtrace = "<tr><td colspan=\"2\"><a href=\"%s/backtrace\">%s</a></td></tr>" % (request.path_url.rstrip("/"), _("Show raw backtrace"))
@@ -313,6 +314,17 @@
                               % (_("This is an interactive task"), _("You can jump to the chrooted shell with:"), filename,
                                  _("You can jump directly to the debugger with:"), filename, debugger,
                                  _("see"), _("for further information about cmdline flags"))
+
+                #TODO: change to a good name
+                testwindow = "<h2>RedHat KB Search Results</h2>"
+		if task.get_matched() != None:
+                    for i in task.get_matched().split('\n')[0:-1]:
+                        item = i.split('@#$%') 
+                        cur = "<p><a href=%s>%s</a></p>" %(item[1], item[0])
+                        testwindow += cur
+		else:
+	            testwindow += "<p>No matched KBs!</p>"	
+                    
             elif task.has_log():
                 backtracewindow = "<h2>Log:</h2><textarea class=\"backtrace\">%s</textarea>" % task.get_log()
 
@@ -427,6 +439,7 @@
         output = output.replace("{back}", back)
         output = output.replace("{backtrace}", backtrace)
         output = output.replace("{backtracewindow}", backtracewindow)
+        output = output.replace("{testwindow}", testwindow)
         output = output.replace("{caseno}", caseno)
         output = output.replace("{notify}", notify)
         output = output.replace("{delete}", delete)
diff -ruN retrace-server-1.12.1/src/retrace-server-worker retrace-server-1.12p/src/retrace-server-worker
--- retrace-server-1.12.1/src/retrace-server-worker	2015-04-12 16:42:30.831001119 +0800
+++ retrace-server-1.12p/src/retrace-server-worker	2015-04-12 17:51:30.500000123 +0800
@@ -662,6 +662,13 @@
 
         task.add_misc("bt-filter", bt_filter)
 
+    if kernellog:
+        child = Popen(["cybertron_parser", str(task.get_taskid())], stdin=PIPE, stdout=PIPE, stderr=None)
+        parser = child.communicate(None)[0]
+        if child.wait():
+            parser = "cybertron_parser exitted with %d\n\n%s" % (child.returncode, cybertron_parser)
+    task.set_matched(parser)
+    
     crashrc_lines = []
 
     if "/" in vmlinux:
